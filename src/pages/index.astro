---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Encrypted Chat via Piping Server">
    <div
        class="flex flex-col text-center sm:flex-row sm:text-left justify-center sm:justify-between items-center mb-4 text-sm gap-2"
    >
        <p>
            Symmetric end to end encryption for chat using piping server -
            <a
                target="_blank"
                href="https://dev.to/nwtgck/simple-chat-over-only-http-without-websocket-and-webrtc-1n4m"
                class="text-blue-600 hover:underline"
            >
                based on Ryo Ota
            </a>
        </p>

        <a href="https://webrtc.org/" class="text-blue-600 hover:underline"
            >WebRTC based</a
        >
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4">
        <input
            type="text"
            placeholder="Your ID. Any String"
            id="your_id"
            class="px-3 py-2 border border-gray-300 rounded"
        />
        <input
            type="text"
            placeholder="Peer ID"
            id="peer_id"
            class="px-3 py-2 border border-gray-300 rounded"
        />
        <select id="piping" class="px-3 py-2 border border-gray-300 rounded">
            <option value="https://ppng.io/">https://ppng.io/</option>
            <option value="https://piping.glitch.me/"
                >https://piping.glitch.me/</option
            >
            <option value="https://piping-47q675ro2guv.runkit.sh/"
                >https://piping-47q675ro2guv.runkit.sh/</option
            >
        </select>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-3 gap-3 mb-4">
        <button
            id="btn"
            title="Secrets has to match"
            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
            Connect
        </button>
        <button
            id="button_file"
            disabled
            class="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600 disabled:opacity-50 disabled:cursor-not-allowed"
        >
            Transfer Files
        </button>
        <input
            type="text"
            placeholder="Secrets. has to match with your peer"
            id="html_secret"
            class="px-3 py-2 border border-gray-300 rounded"
        />
    </div>

    <div
        id="file_upload"
        class="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-5 mb-4 shadow-sm"
        style="display: none;"
    >
        <h3
            class="text-sm font-bold text-gray-800 mb-3 flex items-center gap-2"
        >
            File Transfer
        </h3>

        <div class="mb-2">
            <span class="text-xs text-gray-600">
                Multiple files will be zipped and encrypted using your chat
                secret
            </span>
        </div>

        <div class="flex flex-col md:flex-row gap-3">
            <input
                type="file"
                id="fileInput"
                multiple
                class="flex-1 px-3 py-2 text-sm border border-gray-300 rounded-md cursor-pointer
             bg-white hover:bg-gray-50
             file:mr-3 file:py-1.5 file:px-3
             file:rounded file:border-0
             file:text-xs file:font-medium
             file:bg-blue-600 file:text-white
             file:cursor-pointer file:hover:bg-blue-700
             focus:outline-none focus:ring-2 focus:ring-blue-400"
            />

            <button
                id="uploadButton"
                class="px-6 py-2 bg-blue-600 text-white text-sm font-semibold rounded-md
             hover:bg-blue-700 active:bg-blue-800
             transition-colors duration-150
             focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2
             whitespace-nowrap"
            >
                Send Files
            </button>
        </div>
    </div>

    <div class="mb-4">
        <input
            type="text"
            placeholder="Message. Enter to send"
            id="message"
            disabled
            class="w-full px-3 py-2 border border-gray-300 rounded disabled:bg-gray-200 disabled:text-gray-600"
        />
    </div>

    <div id="talks" class="p-2 space-y-2"></div>

    <script
        is:inline
        src="https://rf00.github.io/minizip-asm.js/lib/minizip-asm.min.js"
    ></script>
    <script is:inline src="/js/piping-extra.js"></script>

    <style>
        #talks span {
            display: block;
            margin: 5px;
            padding: 8px;
            border-radius: 8px;
        }

        .me {
            text-align: right;
            background-color: #e3f2fd;
        }

        .other {
            background-color: #ffe4c4;
        }
    </style>

    <script is:inline>
        let show_file = false;
        let last_msg;

        function switchFile() {
            show_file = !show_file;
            const fileUpload = document.getElementById("file_upload");
            if (show_file) {
                fileUpload.classList.add("grid");
                fileUpload.style.display = "grid";
            } else {
                fileUpload.classList.remove("grid");
                fileUpload.style.display = "none";
            }
        }

        async function uploadFile() {
            var fileInput = document.getElementById("fileInput");
            if (!fileInput.files || fileInput.files.length === 0) {
                return;
            }
            var file = fileInput.files[0];
            const zip_file = await compress_with_minizip_and_encrypt(
                fileInput.files,
                html_secret.value,
                file.name + ".zip",
            );
            var formData = new FormData();
            formData.append("file", zip_file);
            url = (await getUrl(`${your_id.value}`)).substring(0, 50) + "~f";
            text = "sending file: \n" + url;
            send(text);
            console.log(url, await getUrl(`${your_id.value}`));
            fetch(url, {
                method: "POST",
                body: formData,
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error(
                            "Upload failed with status " + response.status,
                        );
                    }
                    console.log("File uploaded successfully.");
                })
                .catch((error) => {
                    addMyMessageSpan(
                        "Error occurred during file upload:" + error.message,
                    );
                });
        }

        async function getUrl(str) {
            return piping.value + "jschat-" + (await sha256(str));
        }

        var check_url, post_url, cypher_key;

        message.disabled = true;

        function switchOp(flag) {
            your_id.disabled =
                peer_id.disabled =
                btn.disabled =
                piping.disabled =
                html_secret.disabled =
                    flag;
            message.disabled = !flag;
            button_file.disabled = !flag;
        }

        async function receiveLoop(btn) {
            if (
                your_id.value === "" ||
                peer_id.value === "" ||
                html_secret.value === ""
            ) {
                return;
            }

            switchOp(true);
            check_url = await getUrl(`${peer_id.value}-${your_id.value}`);
            post_url = await getUrl(`${your_id.value}-${peer_id.value}`);

            const currentDate = new Date();
            const salt = `${currentDate.getUTCFullYear()}-${currentDate.getUTCMonth() + 1}-${currentDate.getUTCDate()}`;
            cypher_key = await generateKeyFromSeed(html_secret.value, salt);
            send(`** ${your_id.value} is ready **`);

            while (true) {
                try {
                    const res = await fetch(check_url);
                    const raw = await res.text();
                    const decryptedData = await decrypt2Str(raw, cypher_key);
                    addReceiveSpan(decryptedData);
                } catch (err) {
                    console.error(err);
                    switchOp(false);
                    break;
                }
            }
        }

        async function addReceiveSpan(decryptedData) {
            const talk = document.createElement("span");
            talk.classList.add("other");

            const regex0 = /^sending file: \n(http.*~f$)/;
            const m = decryptedData.match(regex0);
            if (m) {
                talk.innerText = `${new Date().toLocaleTimeString()}\n`;
                talk.innerHTML =
                    talk.innerHTML +
                    `sending file:<a href="${m[1]}">${m[1]}</a>`;
            } else {
                talk.innerText = `${new Date().toLocaleTimeString()}\n  ${decryptedData}`;
            }
            talks.insertBefore(talk, talks.firstChild);
        }

        async function send(msg = message.value) {
            if (msg === "") {
                return;
            }
            const data = await encrypt2Str(msg, cypher_key);
            fetch(post_url, {
                method: "POST",
                body: data,
            })
                .then((res) => {
                    if (res.ok) {
                        addMyMessageSpan(msg);
                        message.value = "";
                    }
                })
                .catch((err) => console.error(err));
        }

        window.message.onkeyup = (ev) => {
            if (ev.key === "Enter") {
                send();
            }
        };

        async function addMyMessageSpan(msg) {
            const talk = document.createElement("span");
            talk.classList.add("me");
            talk.innerText = `${new Date().toLocaleTimeString()}\n  ${msg}`;
            talks.insertBefore(talk, talks.firstChild);
        }

        document.addEventListener("DOMContentLoaded", function () {
            sha256(new Date().getTime().toString()).then(
                (k) => (html_secret.value = k.substring(3, 7)),
            );
        });

        document.getElementById("btn").addEventListener("click", function () {
            receiveLoop(this);
        });

        document
            .getElementById("button_file")
            .addEventListener("click", switchFile);
        document
            .getElementById("uploadButton")
            .addEventListener("click", uploadFile);
    </script>
</Layout>
